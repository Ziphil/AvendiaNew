\zml?|version="1.0"|>
\xml?|version="1.0",encoding="UTF-8"|>

\page<
  \name<代数と余代数と何とか morphism>
  \use-math>

  \h1<日記 (2019 年 11 月 15 日)>
  \p<
    Haskell を勉強していると、ちょくちょく catamorphism とか anamorphism のようなギリシャ語の接頭辞が付いた morphism を見かける。
    これらの概念についてそろそろちゃんと理解したくなってきたので、分かったことをまとめようと思う。
    ちなみに、私は圏論が好きなので、プログラミング言語論的な視点よりも圏論的な視点の方を優先する。
  >
  \p<
    この日記の読者層はよく分からないが、圏論について詳しくないのであれば、圏とは集合全体を集めたものだと思い、関手とは集合に対して別の集合を対応付けるような規則だと思って構わない。
    さらに、圏の対象を集合と読み替え、圏の射は写像と読み替えて良い。
  >
  \p<
    本題に入る。
    問題となっている射を理解するには、まず自己関手上の代数について知っておく必要がある。
    これは、以下で定義される概念である。
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to> \scr<C>> をとる。
      &m<\scr<C>> の対象 &m<X> と射 &m<`a: FX \to> X> の組 &m<(X, `a)> を &m<F>-\em<代数\fl<algebra>> という。
    >
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to> \scr<C>> をとる。
      &m<F>-代数 &m<(X, `a), (Y, `b)> に対し、&m<\scr<C>> の射 &m<f: X \to> Y> が、図式
      &mb<
        \diag<
          \v<FX> \v<FY> \br>
          \v<X> \v<Y>
          \ar|s="1",e="2"|<Ff> \ar|s="1",e="3",inv|<`a>
          \ar|s="3",e="4",inv|<f> \ar|s="2",e="4"|<`b>
        >
      >
      を可換にするとき、&m<f> を &m<F>-\em<代数の射\fl<algebra morphism>> という。
    >
  >
  \p<
    上記の定義において、&m<F>-代数とその間の射は圏を成す。
    この圏は、以降 &m<\sb<\bfrm<Alg>><F> (\scr<C>)> で表すことにする。
  >
  \p<
    代数の中で特に重要なのが、以下で定義される始代数である。
    これは、プログラミングで用いられる様々なデータ構造を表現することができるものである。
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to> \scr<C>> をとる。
      ある &m<F>-代数 &m<(\bar<X>, \bar<`a>)> について、任意の &m<F>-代数 &m<(X, `a)> に対し、&m<F>-代数の射 &m<f: (\bar<X>, \bar<`a>) \to> (X, `a)> が一意に存在するとする。
      このとき、&m<(\bar<X>, \bar<`a>)> を &m<F>-\em<始代数\fl<initial algebra>> という。
    >
  >
  \p<
    定義から分かるように、&m<F>-始代数とは単に &m<\sb<\bfrm<Alg>><F> (\scr<C>)> の始対象のことである。
  >
  \p<
    さて、以上の準備のもと、最初の疑問だった catamorphism が定義できる。
    ここだけ英単語になるのも少し気持ち悪いので、勝手に日本語訳を当てることにする。
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to> \scr<C>> をとる。
      &m<F>-代数 &m<(X, `a)> に対し、&m<F>-始代数 &m<(\bar<X>, \bar<`a>)> からの唯一の射 &m<f: (\bar<X>, \bar<`a>) \to> (X, `a)> を、&m<(X, `a)> による\em<下方射\fl<catamorphism>> と呼んで &m<\rm<cata> (X, `a)> で表す。
    >
  >
  \p<
    イメージを掴むため、1 つ例を挙げておこう。
    圏として &m<\bfrm<Set>> を考え、ある集合 &m<V> を固定し、
    &mb<
      \array|align="rrcl"|<
        \c<\sb<F><V>:> \c<\bfrm<Set>> \c<\longto>> \c<\bfrm<Set>> \br>
        \c> \c<X> \c<\longmapsto>> \c<1 + V \times> X>
      >
    >
    とおく。
    すると、&m<\sb<F><V>>-代数とは、集合 &m<X> と写像 &m<`a: 1 + V \times> X \to> X> の組 &m<(X, `a)> である。
    ここで、余積の普遍性によって、写像 &m<`a> は 2 つの写像 &m<\sb<`a><0>: 1 \to> X>, &m<c: V \times> X \to> X> の組と同一視できる。
    さらに、写像 &m<\sb<`a><0>> は &m<X> の元 &m<\sb<x><0> \in> X> と同一視できる。
    以上のことから、&m<\sb<F><V>>-代数とは、集合 &m<X> とその元 &m<\sb<x><0> \in> X> と写像 &m<c: V \times> X \to> X> の組 &m<(X, \sb<x><0>, c)> とも思うことができる。
  >
  \p<
    さて、それでは &m<\sb<F><V>>-始代数とはどのようなものだろうか。
    これは実は &m<V> の元から成る有限リスト全体の集合になる。
    すなわち、
    &mb<
      \bar<X> \coloneqq> `{ \langle> \sb<v><1>, \cdots>, \sb<v><n> \rangle> \mid> \sb<v><i> \in> V, n \geq> 0 `}
    >
    とおき、&m<\sb<\bar<x>><0>> を 0 個の元から成るリスト &m<\langle> \rangle>> とし、&m<\bar<c>> はリストへの値の追加
    &mb<
      \array|align="rrcl"|<
        \c<\bar<c>:> \c<V \times> \bar<X>> \c<\longto>> \c<\bar<X>> \br>
        \c> \c<(v, \langle> \sb<v><1>, \cdots>, \sb<v><n> \rangle>)> \c<\longmapsto>> \c<\langle> v, \sb<v><1>, \cdots>, \sb<v><n> \rangle>>
      >
    >
    であるとすると、&m<(\bar<X>, \sb<\bar<x>><0>, \bar<c>)> は &m<\sb<F><V>>-始代数になる。
    実際、別の &m<\sb<F><V>>-始代数 &m<(X, \sb<x><0>, c)> があったとすると、写像 &m<f: \bar<X> \to> X> を帰納的に
    &mb<
      \array|align="rcl"|<
        \c<f (\langle> \rangle>)> \c<\coloneqq>> \c<\sb<x><0>> \br>
        \c<f (\langle> \sb<v><1>, \cdots>, \sb<v><n> \rangle>)> \c<\coloneqq>> \c<c (v, f (\langle> \sb<v><1>, \cdots>, \sb<v><n - 1> \rangle>))>
      >
    >
    と定めれば、&m<f> は &m<\sb<F><V>>-代数の唯一の射となることが分かる。
    すなわち、&m<f = \rm<cata> (X, \sb<x><0>, c)> である。
  >
  \p<
    &m<\sb<F><V>>-始代数についてもう少し詳しく見てみよう。
    これは、いわば &m<\sb<F><V>> が定める構造に関して、次のような意味で「自由に」生成されたデータ構造であると見なすことができる。
    &m<\sb<F><V>>-代数とは、集合 &m<X> の他に元 &m<\sb<x><0> \in> X> と写像 &m<c: V \times> X \to> X> が定まっているものであった。
    ここで、&m<X> がどのような集合であるか全く知らない状態から、&m<X> の元を得るにはどうしたら良いかを考えてみる。
    まず、&m<\sb<x><0>> という元はすでに定まっているので、&m<X> の元として &m<\sb<x><0>> が得られた。
    次に、写像 &m<c: V \times> X \to> X> があるので、&m<V> の元 &m<\sb<v><1>> があれば、先程得られた &m<\sb<x><0>> と組み合わせて、&m<c (\sb<v><1>, \sb<x><0>)> という新しい &m<X> の元が得られる。
    すると、さらに &m<V> の元 &m<\sb<v><2>> があれば、ここから &m<c (\sb<v><2>, c (\sb<v><1>, \sb<x><0>))> というまた新しい &m<X> の元が得られ、以降これを続けることで次々と &m<X> の元が得られる。
    このようにして再帰的に得られるものだけをそれぞれ区別しつつ集めた集合が、まさに &m<\sb<F><V>>-代数 &m<\bar<X>> である。
    すなわち、始代数というのは、自己関手が定める構造だけを使って再帰的に (同じ意味だが帰納的に) 得られる元を区別しつつ集めたものと捉えられる。
  >
  \p<
    次に、&m<\sb<F><V>>-代数の下方射について詳しく見てみる。
    繰り返すが、&m<\sb<F><V>>-代数の構成要素は、集合 &m<X> とその元 &m<\sb<x><0> \in> X> と写像 &m<c: V \times> X \to> X> であった。
    これはまさに、リストの畳み込みを行う関数 (Haskell では \m<foldr>, Ruby では \m<inject>) に渡す引数である。
    そして、上の定義を見ると分かるように、&m<\rm<cata> (X, \sb<x><0>, c)> がまさにその畳み込み関数になっている。
    すなわち、代数の下方射とは、代数によって再帰的に定められたデータ構造に対して畳み込みを行うような関数を表現していると捉えられる。
  >
  \p<
    さて、今度は代数の双対概念である余代数と終余代数を考える。
    単に圏論的双対をとるだけだが、念のため定義を書き下しておく。
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to> \scr<C>> をとる。
      &m<\scr<C>> の対象 &m<X> と射 &m<`a: X \to> FX> の組 &m<(X, `a)> を &m<F>-\em<余代数\fl<coalgebra>> という。
    >
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to> \scr<C>> をとる。
      &m<F>-余代数 &m<(X, `a), (Y, `b)> に対し、&m<\scr<C>> の射 &m<f: X \to> Y> が、図式
      &mb<
        \diag<
          \v<X> \v<Y> \br>
          \v<FX> \v<FY>
          \ar|s="1",e="2"|<f> \ar|s="1",e="3",inv|<`a>
          \ar|s="3",e="4",inv|<Ff> \ar|s="2",e="4"|<`b>
        >
      >
      を可換にするとき、&m<f> を &m<F>-\em<余代数の射\fl<coalgebra morphism>> という。
    >
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to> \scr<C>> をとる。
      ある &m<F>-余代数 &m<(\bar<X>, \bar<`a>)> について、任意の &m<F>-余代数 &m<(X, `a)> に対し、&m<F>-余代数の射 &m<f: (X, `a) \to> (\bar<X>, \bar<`a>)> が一意に存在するとする。
      このとき、&m<(\bar<X>, \bar<`a>)> を &m<F>-\em<終余代数\fl<terminal coalgebra>> という。
    >
  >
  \thm|type="def"|<
    \p<
      圏 &m<\scr<C>> 上の自己関手 &m<F: \scr<C> \to> \scr<C>> をとる。
      &m<F>-余代数 &m<(X, `a)> に対し、&m<F>-終代数 &m<(\bar<X>, \bar<`a>)> への唯一の射 &m<f: (X, `a) \to> (\bar<X>, \bar<`a>)> を、&m<(X, `a)> による\em<上方射\fl<anamorphism>> と呼んで &m<\rm<ana> (X, `a)> で表す。
    >
  >
  \p<
    例として、先程挙げた &m<\sb<F><V>> を考える。
    &m<\sb<F><V>>-余代数とは、集合 &m<X> と写像 &m<`a: X \to> 1 + V \times> X> の組 &m<(X, `a)> である。
    この写像 &m<`a> は、各元 &m<x \in> X> に対して、特殊なケースとして 1 の唯一の元を対応させるか、そうでなければ &m<V> と &m<X> の元の組 &m<(v, x')> を対応させるものである。
  >
  \p<
    &m<\sb<F><V>>-終余代数は、&m<V> の元から成る有限もしくは無限リスト (リストよりストリームと言った方が正確かもしれない) 全体の集合になる。
    つまり、
    &mb<
      \bar<X> \coloneqq> `{ \langle> \sb<v><1>, \sb<v><2>, \cdots> \rangle> \mid> \sb<v><i> \in> V, \sb<v><i> \text< たちは有限個でも無限個でも良い> `}
    >
    とおき、1 の唯一の元を &m<\star>> で表すことにして、&m<\bar<`a>> はリストの先頭と残りを取り出す操作
    &mb<
      \array|align="rrcl"|<
        \c<\bar<`a>:> \c<\bar<X>> \c<\longto>> \c<1 + V \times> \bar<X>> \br>
        \c> \c<\langle> \sb<v><1>, \sb<v><2>, \cdots> \rangle>> \c<\longmapsto>> \c<\case<
          \c<\star>> \c<(\text<リストが空のとき>)> \br>
          \c<(\sb<v><1>, \langle> \sb<v><2>, \cdots> \rangle>)> \c<(\text<リストが空でないとき>)>
        >>
      >
    >
    であるとすると、&m<(\bar<X>, \bar<`a>)> は &m<\sb<F><V>>-終余代数になる。
    実際、別の &m<\sb<F><V>>-余代数 &m<(X, `a)> があったとすると、写像 &m<f: X \to> \bar<X>> であって、
    &mb<
      &mark<\wheart>>
      f (x) = \case<
        \c<\langle> \rangle>> \c<(`a (x) = \star|ord|>)> \br>
        \c<\langle> v, f (x') \rangle>> \c<(`a (x) \eqqcolon> (v, x'))>
      >  
    >
    を満たすものが作れ、これが &m<\sb<F><V>>-余代数の唯一の射となることが分かる。
    すなわち、&m<f = \rm<ana> (X, `a)> である。
  >
  \p<
    &m<\sb<F><V>>-終余代数について詳しく見よう。
    &m<\sb<F><V>>-余代数とは、集合 &m<X> の他に写像 &m<`a: X \to> 1 + V \times> X> が定まっているものであった。
    この写像によって、ある &m<X> の元 &m<x> があると、&m<`a> によって &m<\star>> が返ってこない限りは、&m<V> の元 &m<\sb<v><1>> と新たな &m<X> の元 &m<x'> が得られる。 
    この &m<x'> を使えば、再び &m<\star>> が返ってこない限りは、さらに &m<V> の元 &m<\sb<v><2>> と新たな &m<X> の元 &m<x''> が得られ、この操作は (もしかしたら無限に) 続けることができる。
    この操作を行うごとに毎回 &m<V> の元が得られるので、これらのデータから他の操作をすることができるようになる。
    つまり、代数を考えるときは &m<\sb<F><V>> は &m<X> の元の構成方法を定めていたのに対し、余代数を考えるときは &m<\sb<F><V>> は &m<X> の元の「使い方」を定めていると捉えることができる。
    この捉え方をすれば、終余代数というのは、自己関手によって定まる元の使い方が保証されるようにできるだけ元を集めたものと見なすことができる。
  >
  \p<
    次に、&m<\sb<F><V>>-代数の上方射について詳しく見る。
    ≡╹ω╹≡ 途中です。
  >

>
