\zml?|version="1.0"|>
\xml?|version="1.0",encoding="UTF-8"|>

\page<
  \name<サイト生成用 XML の仕様>

  \h1<このサイトの生成について>
  \p<
    このサイトのほぼ全てのページは、HTML を直接書いて作っているのではなく、XML を自作のスクリプトで HTML に変換することで作っています。
    こうすることで、表示用の構造 (最終的にネットに公開される HTML) と文書そのものの意味的構造 (変換前の XML) が分離でき、デザインの変更などが容易にできます。
  >
  \p<
    例えば、図表の表示スタイルを変えたいとなると、全てのページを見て図表があるか確認し、あるならその箇所の HTML ソースを書き換える必要があります。
    このサイトには 400 を超えるページが存在しているので、この作業は非常に大変です。
    しかし、文書そのもののデータを XML でもっておき、それを変換することで HTML を生成するようにしておけば、その変換規則の部分を書き換えるだけ済むわけです。
  >
  \p<
    さらに、記述を簡略化するため、原稿データは XML 形式ではなく自作の ZenML 形式で書いてあります。
    ZenML 形式は XML 形式の構文のみを変更した形式で、XML とほぼ同等の表現力および表現方式をもちます。
    詳しくは、\a|href="../../application/download/7.html"|<こちら>を参照してください。
  >
  \p<
    以下に、サイト生成に用いるタグの仕様を備忘録としてまとめておきます。
  >
  \h1<基本>
  \h2<\m<page>>
  \p<
    XML のルート要素である。
    サイトを生成するときには、1 つのファイルが 1 つのページを表すので、この要素が 1 つのページを表すことになる。
  >
  \h2<\m<name>, \m<ver>>
  \p<
    \m<name> 要素は、そのページのタイトルを表す。
    生成される HTML のナビゲーション部分に表示される。
  >
  \p<
    \m<ver> 要素は、そのベージの情報がシャレイア語のどの時期に沿っているかを表す。
    シャレイア語の通時的な説明を載せているページなど、ページの内容が特定の時期に依存しない場合は、\m<*> を代わりに指定する。
    シャレイア語のページでない場合は、このタグは省略する。
    これも生成される HTML のナビゲーション部分に表示される。
  >
  \p<
    \m<name> と \m<ver> はナビゲーション部分にのみ表示され、本文には影響を与えない。
    そのため、\m<page> の子要素になっていればどの位置に書いても良いが、変換スクリプトの実装の都合上、\m<page> の最初の 2 つの子要素にすべきである。 
  >
  \h1<ヘッダ>
  \h2<\m<import-script>>
  \p<
    この要素の名前を \m<script> に変えたタグが、生成される HTML のヘッダ部分に挿入される。
    JavaScript を用いるページなどで用いる。
  >
  \h2<\m<base>>
  \p<
    この要素がそのまま生成される HTML のヘッダ部分に挿入される。
    エラーページなど、開かれるときの URL が定まらないときに、相対 URL の基準位置を固定するのに用いる。
  >
  \h1<目次ページ>
  \h2<\m<pb>, \m<ab>, \m<abo>, \m<aba>, \m<abd>>
  \p<
    \m<pb> 要素は、目次ページにおける一連の目次のリストを表す。
    この子要素は、以下に説明する \m<ab>, \m<abo>, \m<aba>, \m<abd> のいずれかとする。
  >
  \p<
    \m<ab>, \m<abo>, \m<aba>, \m<abd> の 4 つの要素は、どれも目次の 1 つの項目になり、参照先のページへのリンクに変換される。
    参照先のページの URL は \m<href> 属性で記述する。
    \m<ab> 要素は、最も一般的な目次項目である。
    \m<abo> 要素と \m<aba> 要素は、シャレイア語関連のページの目次に用いられ、シャレイア語の現在の時期よりも古い時期に沿っているページを表すのに用いられる。
    その中でも、現在と同じ代に沿っているページなら \m<abo> 要素を用い、それより前の時期に沿っているなら \m<aba> 要素を用いる。
    最後に \m<abd> 要素は、準備中のページなど、実際にはリンクを張らずに項目のみを表支持させておきたい場合に用いる。
  >
  \h2<\m<hb>>
  \p<
    \m<hb> 要素は、目次リストを表す \m<pb> 要素の表題を記述するのに用いる。
  >
  \h1<本文>
  \h2<\m<h1>, \m<h2>>
  \h2<\m<p>>
  \h2<\m<img>>
  \p<
    この要素の箇所に画像を表示する。
    HTML の場合と同様に、\m<src> 属性に表示したい画像の URL を指定する。
  >
  \p<
    \m<img> 要素はブロック要素になっているので、\m<p> 要素の中に入れる必要はない。
  >
  \h2<\m<a>, \m<an>>
  \p<
    この要素の箇所にリンクを表示する。
    HTML の場合と同様に、\m<href> 属性にリンク先の URL を指定する。
    \m<a> 要素の代わりに \m<an> 要素を用いると、リンクテキストが装飾されず、本文の他の部分と同様の文字色で表示される。
  >
  \h2<\m<ol>, \m<ul>, \m<li>>
  \h2<\m<xl>, \m<li>, \m<sh>, \m<ja>>
  \p<
    \m<xl> 要素により、そのページでいる扱っている言語 (多くの場合でシャレイア語) の例文リストを作ることができる。
    この子要素は複数の \m<li> 要素から成る。
    その \m<li> 要素はさらに小要素として \m<sh> 要素と \m<ja> 要素を 1 つずつもち、それぞれそのページで扱っている言語の文とそれを翻訳した文を表す。
    \m<ja> 要素は省略することができる。
  >
  \pre~<
    \xl&lt>
      \li&lt>\sh&lt>{salot a fit e lêdik.}&gt>\ja&lt>これは文です。&gt>&gt>
      \li&lt>\sh&lt>{pa salot a qut e pet?}&gt>\ja&lt>あれは何ですか?&gt>&gt>
    &gt>
  >
  \h2<\m<el>, \m<li>, \m<et>, \m<ed>>
  \p<
    \m<el> 要素は、項目名とその項目の内容のリストを生成する。
    この小要素は複数の \m<li> 要素から成り、各 \m<li> 要素の小要素は \m<ed> 要素と \m<ed> 要素がそれぞれ 1 つであり、順に項目名とその内容を表す。
    HTML の説明リストと用途はだいたい同じだが、HTML と要素の構造が違うので注意すること。
  >
  \h2<\m<trans>, \m<li>, \m<ja>, \m<sh>>
  \p<
    \m<trans> 要素により、歌詞などの対訳表を作ることができる。
    この子要素は複数の \m<li> 要素であり、それぞれが表の 1 行分を表す。
    各 \m<li> 要素は小要素として \m<ja> 要素と \m<sh> 要素を 1 つずつもち、それぞれもともとの言語によるフレーズとそれをそのページで扱っている言語に翻訳したフレーズを表す。
  >
  \h2<\m<table>, \m<tr>, \m<th>, \m<thl>, \m<td>>
  \h2<\m<section-table>>
  \p<
    この要素の箇所にそのページの節の目次を生成する。
  >
  \h2<\m<form>, \m<input>, \m<textarea>>
  \h2<\m<special>>
  \p<
    この要素は、CGI など動的なページのテンプレートを作るときに、CGI が生成した HTML を挿入する箇所を指定する意味で使われる。
  >
  \h2<\m<pdf>>
  \p<
    この要素の箇所に PDF ファイルを表示する。
    \m<src> 属性で表示したい PDF ファイルの URL を指定する。
  >
  \h2<\m<slide>>
  \p<
    この要素の箇所に Speaker Deck のスライドを表示する。
    \m<id> 属性でスライドのデータ ID を指定する。
  >
  \h2<\m<pre>, \m<samp>>
  \p<
    \m<pre> 要素の箇所にソースコードを別行立てで表示する。
    各 \m<pre> 要素の直後に \m<samp> 要素を置くと、それはソースコードを実行したときの出力を意味する。
    どちらも HTML を生成する際にインデントは削除されるので、XML の構造に従って小要素のテキストをインデントすることができる。
  >
  \p<
    同名の HTML 要素とは少し使い方が異なるので注意すること。
  >
  \h2<\m<c>, \m<m>>
  \p<
    ソースコードに関連する文字列を表示するときに用いる。
    \m<c> 要素は実際のソースコード中に現れる文字列を引用するときに用い、\m<m> はそれ以外のソースコードに関連する文字列に対して用いる。
  >
  \h2<\m<x>, \m<xn>>
  \p<
    そのページで扱っている言語を表すのに用いる。
    変換後の HTML では、それ以外の本文とは別のフォントで表示され、そこで話題にしている言語と本文の記述に用いている言語が明確に区別できるようになる。
    \m<x> 要素を用いた場合は、小要素のテキストが単語ごとに分解され、それぞれがシャレイア語辞典の該当項目へのリンクになる。
    \m<xn> 要素を用いた場合は、リンクにはならずにフォントが変わるのみである。
  >
  \p<
    なお、変換スクリプトで ZenML を HTML に変換する際に、ZenML の \m~<{}> 要素と \m~<[]> 要素がそれぞれ \m<x> 要素と \m<xn> 要素に変換されるように設定してあるので、より簡潔な括弧記法を用いる場合が多い。
  >
  \h2<\m<k>>
  \p<
    この要素の小要素のテキストは、必ず日本語フォントで表示される。
    そのままでは欧文フォントで半角文字のように表示されてしまう場合に、それを抑制するのに用いる。
  >
  \h2<\m<i>>
  \p<
    この要素の小要素のテキストが変数名であることを表す。
    変換後の HTML ではイタリック体で表示されるが、あくまでそう表示されるというだけなので、イタリック体で表示するためにこの要素を用いることは推奨されない。
  >
  \p<
    なお、変換スクリプトでは、ZenML の \m~<//> 要素を \m<i> 要素にマップしてあるので、どちらを用いても良い。
  >
  \h2<\m<h>>
  \p<
    この要素は、ハイリア数を記述するために用いる。
  >
  \h2<\m<sup>, \m<sub>>
  \h2<\m<fl>>
  \h2<\m<small>>
  \h2<\m<br>>
  \h1<エラーページ>
  \h2<\m<error>, \m<code>, \m<message>>

>
